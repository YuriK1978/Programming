# List (список) - изменяемый, упорядоченный, обычно хранит значения одного типа, O(1) доступ к элементу.
# !!! При создании пустого списка используй [], а не list[] - более чем в 2 быстрее.
# Если заранее известен размер, то не используй append, т.к. Python видя изменение, резервирует больше памяти, которая потом не используется.
# !!! Sort - меняет исходный список, а Sorted - нет!!!
# !!! При указании среза за границей списка ошибки не будет!!!
# !!! При запросе индекса за границей списка будет ошибка: IndexError: list index out of range!!!


#....................No1 Slices

#List = ['a', 'b', 'c', 'd', 'e', 'f']
#print(List[0:3]) #['a', 'b', 'c']
#print(List[1:3]) #['b', 'c']

#....................Function

list = [1, 2, 3, 4, 5]
def slice_func(list):
    return list[::-1]

print(slice_func(list))
print([id(x) for x in list])

#....................No2 Enumerate
#List = ['a', 'b', 'c', 'd', 'e', 'f']
#for i, res in enumerate(List):
    #print(f'под интексом {i} находится {res}')
    
# Без F-строк:
#List = ['a', 'b', 'c', 'd', 'e', 'f']
#for index, value in enumerate(List):
    #print(index, value)

#....................No3 Random fill and maх even and min index
#import random
#list = [random.randint(1, 50) for i in range(20)]
#print(list)
#print(f'Максимальный элемент: {max(list)}, с индексом: {list.index(max(list))}')
#print(f'Минимальный элемент: {min(list)}, с индексом: {list.index(min(list))}')
#list_even = [i for i in list if i % 2 == 0]
#if list_even:
#    print(list_even)
#    print(f'Максимальный четный элемент: {max(list_even)}, с индексом: {list_even.index(max(list_even))}')
#else:
#    print("Чётных элементов в списке нет")

#....................No4 manual input and lenght of the list
#print("Введите элементы списка")
#new_list = list(map(int, input().split()))
#print(f"Длина списка: {len(new_list)}")

#............Reverse()
#import random
#list = [random.randint(1, 50) for i in range(10)]
#print(list)
#list_reverse = list.reverse()
#print(list)

#............Append()

# append() принимает один аргумент и добавляет его в конец list. Тип параметра может быть любым: числа, строки, словари и так далее. 
# Метод возвращает объект None — то есть ничего.

#List = ['a', 'b', 'c', 'd', 'e', 'f']
#List.append('g')
#print(List) #['a', 'b', 'c', 'd', 'e', 'f', 'g']

#............Extend()

# extend() добавляет новые элементы в конец списка, но, в отличие от append(), принимает в качестве параметров итерируемые объекты: списки, кортежи и строки. 
# При этом объединяемые списки могут содержать элементы любых типов: например, вы можете объединить строки с числами или числа с кортежами.
# Как и append(), метод возвращает объект None.

#List = ['a', 'b', 'c', 'd', 'e', 'f']
#b = 'xyz'
#List.extend(b)
#print(List)
#Output:  ['a', 'b', 'c', 'd', 'e', 'f', 'x', 'y', 'z']
# Строки, которые передаются в extend(), превращаются в списки символов и добавляются посимвольно.
# ВАЖНО! Если передать в extend() не итерируемый объект, например число, Python генерирует TypeError.

# Еще способ добавления элементов в список:
#a = [2, 3]
#b = [1, 4]
#a += b
#print(a)
#Output:[2, 3, 1, 4]

# Еще способ добавления элементов в список:
#a = [2, 3]
#b = [1, 4]
#a[len(a):] = b
#print(a)
#Output:[2, 3, 1, 4]
#Когда мы пытаемся обратиться к несуществующим элементам a, язык добавляет новые элементы из списка b, ссылку на который мы передали справа от оператора присваивания.


#.......................ВЫВОДЫ.....................................

#Функция append() позволяет добавлять в список один новый элемент — например, число, строку или другой список.
#Функция extend() работает как append(), но в качестве параметра принимает итерируемый объект: список, кортеж или строку. 
#Содержимое этого объекта поэлементно добавляется в другой список.
#Кроме методов append() и extend() добавить элементы в список можно с помощью оператора + и срезов. 
#Оба способа действуют как extend() — поочерёдно добавляют элементы одного списка в другой.

#list.append(x)` — добавляет элемент `x` в конец списка.

#list.extend(x)` — добавляет в конец списка элементы списка `x`.

#list.insert(y, x)` — вставляет элемент `x` в список `list` порядковым номером `y`.

#list.remove(x)` — удаляет первый элемент в списке `list`, который равен значению `x`.

#list.pop(y)` — удаляет элемент списка `list` по порядковому номеру `y`.

#list.index(g, x, y)` — возвращает порядковый номер первого элемента со значением `g` в списке `list` в диапазоне от `x` до `y`.

#list.count(x)` — возвращает количество элементов со значением `x` в списке `list`.

#list.sort()` — сортировка списка.

#list.reverse()` — переворачивает (реверсирует) список.

#list.copy()` — копирует список.

#list.clear()` — очищает список.